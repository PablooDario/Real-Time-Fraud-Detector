services:
    
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    depends_on:
        zookeeper:
          condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 10

  kafka-init:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka_topic_init
    depends_on:
      - kafka
    volumes:
      - ./create_topic.sh:/create_topic.sh
    entrypoint: ["/bin/bash", "/create_topic.sh"]

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

    # docker exec -it redis redis-cli
    # LRANGE transactions 0 10

  producer:
    container_name: producer
    build: ./src/producer
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    restart: on-failure

  consumer:
    container_name: consumer
    build: ./src/consumer
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    restart: on-failure

  ml-serving:
    build:
      context: ./src
      dockerfile: ml-serving/Dockerfile
    container_name: ml-serving
    ports:
      - "8000:8000"
    depends_on:
      - consumer

  dashboard:
    build: ./src/dashboard
    container_name: fraud-dashboard
    ports:
      - "8501:8501"
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379